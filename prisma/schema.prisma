datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ====================
// ENUMS
// ====================

// Attendance status enum
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  SICK_LEAVE
  CASUAL_LEAVE
  VACATION
  HOLIDAY
  WORK_FROM_HOME
}

// Status of user in a company
enum CompanyUserStatus {
  PENDING   // Invitation sent but not accepted
  ACTIVE    // User is active in the company
  SUSPENDED // User is temporarily suspended
  INACTIVE  // User left or was removed
}

// Employee status enum
enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  SUSPENDED
}

// Employment type enum
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

// Employee gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Global roles for system-wide permissions
enum GlobalRole {
  SUPER_ADMIN // Can access all companies and system settings
  USER        // Regular user who can be invited to companies
}

// Leave status enum
enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Leave types enum
enum LeaveType {
  SICK_LEAVE
  CASUAL_LEAVE
  ANNUAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  EMERGENCY_LEAVE
  UNPAID_LEAVE
  COMPENSATORY_LEAVE
}

// Marital status enum
enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

// Work location enum
enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

// ====================
// AUTHENTICATION MODELS
// ====================

// User authentication model
model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String?  // Optional for OAuth users
  
  // Profile information
  firstName String?
  middleName String?
  lastName  String?
  avatar    String?
  
  // Account status
  isActive     Boolean @default(true)
  emailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  
  // Global role (for system administration)
  globalRole GlobalRole @default(USER)
  
  // OAuth and external integrations
  provider     String? // 'local', 'google', 'github', etc.
  providerId   String? // External provider user ID
  
  // Security
  lastLoginAt  DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  emailVerificationToken String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile      UserProfile?
  companyUsers CompanyUser[]
  
  @@map("users")
}

// Extended user profile information
model UserProfile {
  id          String   @id @default(cuid())
  bio         String?
  website     String?
  location    String?
  dateOfBirth DateTime?
  phone       String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_profiles")
}

// ====================
// CORE SAAS MODELS
// ====================

// Company/Tenant model for multi-tenancy
model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL-friendly company identifier
  domain      String?  @unique // Custom domain for the company
  logo        String?  // Company logo URL
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  
  // Subscription details
  subscriptionPlan    String?   // Basic, Pro, Enterprise
  subscriptionStatus  String    @default("TRIAL") // TRIAL, ACTIVE, SUSPENDED, CANCELLED
  subscriptionEndsAt  DateTime?
  maxUsers           Int       @default(10)
  
  // Settings
  isActive    Boolean  @default(true)
  settings    Json?    // Company-specific settings
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  companyUsers     CompanyUser[]
  companyRoles     CompanyRole[]
  departments      Department[]
  employees        Employee[]
  attendanceRecords AttendanceRecord[]
  
  @@map("companies")
}

// Company-specific roles (dynamic roles created by companies)
model CompanyRole {
  id          String   @id @default(cuid())
  name        String   // e.g., "Manager", "HR Lead", "Team Lead"
  description String?
  isDefault   Boolean  @default(false) // Default role for new company users
  isSystem    Boolean  @default(false) // System-created roles (ADMIN, EMPLOYEE)
  color       String?  // Hex color for UI
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  userRoles   UserCompanyRole[]
  permissions RolePermission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, name])
  @@map("company_roles")
}

// Many-to-many relationship between company users and companies
model CompanyUser {
  id        String   @id @default(cuid())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  
  // Status
  status    CompanyUserStatus @default(PENDING)
  isActive  Boolean  @default(true)
  
  // Invitation details
  invitedBy String?  // User ID who invited this user
  invitedAt DateTime @default(now())
  joinedAt  DateTime?
  
  // Relations
  roles     UserCompanyRole[]
  employee  Employee? // Link to employee profile if applicable
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, companyId])
  @@map("company_users")
}

// Permission system for granular access control
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "users.create", "employees.read", "attendance.manage"
  module      String   // e.g., "users", "employees", "attendance", "dashboard"
  action      String   // e.g., "create", "read", "update", "delete", "manage"
  description String?
  
  // Relations
  rolePermissions RolePermission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("permissions")
}

// Role-Permission mapping for company roles
model RolePermission {
  id           String      @id @default(cuid())
  
  // Relations
  companyRole  CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId String
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  
  createdAt    DateTime    @default(now())
  
  @@unique([companyRoleId, permissionId])
  @@map("role_permissions")
}

// User roles within a company (many-to-many)
model UserCompanyRole {
  id        String   @id @default(cuid())
  
  // Relations
  companyUser    CompanyUser @relation(fields: [companyUserId], references: [id], onDelete: Cascade)
  companyUserId  String
  companyRole    CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId  String
  
  // Assignment details
  assignedBy String   // User ID who assigned this role
  assignedAt DateTime @default(now())
  expiresAt  DateTime? // Optional expiration date for temporary roles
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([companyUserId, companyRoleId])
  @@map("user_company_roles")
}

// ====================
// BUSINESS MODELS
// ====================

// Attendance tracking
model AttendanceRecord {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  
  // Time tracking
  checkIn     DateTime?
  checkOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  
  // Calculated fields
  hoursWorked Decimal? @db.Decimal(4, 2)
  breakHours  Decimal? @db.Decimal(4, 2)
  overtimeHours Decimal? @db.Decimal(4, 2)
  
  // Status
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  location    String? // Check-in location
  ipAddress   String? // IP address for remote check-ins
  
  // Approval
  approvedBy  String? // Manager who approved
  approvedAt  DateTime?
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([employeeId, date])
  @@map("attendance_records")
}

// Department model for company organization
model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String?  // Department code like "IT", "HR", "FIN"
  
  // Hierarchy
  parentId    String?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  
  // Department head
  headId      String?  // Employee ID who heads this department
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  employees   Employee[]
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, name])
  @@unique([companyId, code])
  @@map("departments")
}

// Employee profile within a company
model Employee {
  id            String   @id @default(cuid())
  employeeId    String   // Company-specific employee ID
  
  // Personal Information
  firstName     String
  lastName      String
  email         String
  phone         String?
  dateOfBirth   DateTime?
  gender        Gender?
  maritalStatus MaritalStatus?
  
  // Address
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  
  // Employment Details
  position      String   // Job title
  hireDate      DateTime
  employmentType EmploymentType @default(FULL_TIME)
  workLocation  WorkLocation @default(OFFICE)
  salary        Decimal? @db.Decimal(10, 2)
  currency      String?  @default("USD")
  
  // Work Information
  manager       Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId     String?
  directReports Employee[] @relation("EmployeeManager")
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  String?
  companyUser   CompanyUser? @relation(fields: [companyUserId], references: [id])
  companyUserId String? @unique
  
  // Attendance and Leave
  attendanceRecords AttendanceRecord[]
  leaveRequests     LeaveRequest[]
  
  // Status
  status        EmployeeStatus @default(ACTIVE)
  terminationDate DateTime?
  terminationReason String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([companyId, employeeId])
  @@unique([companyId, email])
  @@map("employees")
}

// Leave management
model LeaveRequest {
  id          String   @id @default(cuid())
  leaveType   LeaveType
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  days        Int      // Number of days requested
  reason      String
  status      LeaveStatus @default(PENDING)
  
  // Approval workflow
  approvedBy  String?  // Manager who approved/rejected
  approvedAt  DateTime?
  rejectionReason String?
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("leave_requests")
}

// ====================
// ROOT MODELS
// ====================









