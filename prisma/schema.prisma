generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  password               String?
  isActive               Boolean      @default(true)
  emailVerified          Boolean      @default(false)
  emailVerifiedAt        DateTime?
  globalRole             GlobalRole   @default(USER)
  provider               String?
  providerId             String?
  lastLoginAt            DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  emailVerificationToken String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  companyUser            CompanyUser? @relation("UserCompanyUser")

  @@map("users")
}

model Company {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  domain             String?            @unique
  logo               String?
  website            String?
  phone              String?
  email              String?
  address            String?
  city               String?
  state              String?
  country            String?
  zipCode            String?
  subscriptionPlan   String?
  subscriptionStatus String             @default("TRIAL")
  subscriptionEndsAt DateTime?
  maxUsers           Int                @default(10)
  isActive           Boolean            @default(true)
  settings           Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  themeColor         String?            @default("#004aad")
  activities         Activity[]         @relation("CompanyActivities")
  attendanceRecords  AttendanceRecord[] @relation("CompanyAttendanceRecords")
  companyRoles       CompanyRole[]      @relation("CompaniesRoles")
  companyUsers       CompanyUser?
  contacts           Contact[]          @relation("CompanyContacts")
  customFields       CustomField[]      @relation("CompanyCustomFields")
  departments        Department[]       @relation("CompanyDepartments")
  employees          Employee[]         @relation("CompanyEmployees")
  leads              Lead[]             @relation("CompanyLeads")
  opportunities      Opportunity[]      @relation("CompanyOpportunities")

  @@map("companies")
}

model CompanyRole {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions String[]
  company     Company  @relation("CompaniesRoles", fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
  @@map("company_roles")
}

model CompanyUser {
  id                    String            @id @default(cuid())
  userId                String            @unique
  companyId             String            @unique
  status                CompanyUserStatus @default(PENDING)
  isActive              Boolean           @default(true)
  invitedBy             String?
  invitedAt             DateTime          @default(now())
  joinedAt              DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  assignedToId          String?
  avatar                String?
  firstName             String?
  lastName              String?
  middleName            String?
  assignedActivities    Activity[]        @relation("ActivityAssignee")
  createdActivities     Activity[]        @relation("ActivityCreator")
  assignedTo            CompanyUser?      @relation("UserAssignments", fields: [assignedToId], references: [id])
  assignedUsers         CompanyUser[]     @relation("UserAssignments")
  company               Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                  User              @relation("UserCompanyUser", fields: [userId], references: [id])
  assignedContacts      Contact[]         @relation("ContactAssignee")
  createdContacts       Contact[]         @relation("ContactCreator")
  employee              Employee?         @relation("EmployeeCompanyUser")
  assignedLeads         Lead[]            @relation("LeadAssignee")
  createdLeads          Lead[]            @relation("LeadCreator")
  assignedOpportunities Opportunity[]     @relation("OpportunityAssignee")
  createdOpportunities  Opportunity[]     @relation("OpportunityCreator")

  @@map("company_users")
}

model CustomField {
  id                 String              @id @default(cuid())
  name               String
  fieldKey           String
  fieldType          FieldType
  isRequired         Boolean             @default(false)
  isActive           Boolean             @default(true)
  options            Json?
  validation         Json?
  placeholder        String?
  helpText           String?
  displayOrder       Int                 @default(0)
  companyId          String
  entityType         String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contactFieldValues ContactFieldValue[]
  company            Company             @relation("CompanyCustomFields", fields: [companyId], references: [id], onDelete: Cascade)
  leadFieldValues    LeadFieldValue[]

  @@unique([companyId, entityType, fieldKey])
  @@map("custom_fields")
}

model AttendanceRecord {
  id            String           @id @default(cuid())
  date          DateTime         @db.Date
  checkIn       DateTime?
  checkOut      DateTime?
  breakStart    DateTime?
  breakEnd      DateTime?
  hoursWorked   Decimal?         @db.Decimal(4, 2)
  breakHours    Decimal?         @db.Decimal(4, 2)
  overtimeHours Decimal?         @db.Decimal(4, 2)
  status        AttendanceStatus @default(PRESENT)
  notes         String?
  location      String?
  ipAddress     String?
  approvedBy    String?
  approvedAt    DateTime?
  employeeId    String
  companyId     String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  company       Company          @relation("CompanyAttendanceRecords", fields: [companyId], references: [id], onDelete: Cascade)
  employee      Employee         @relation("EmployeeAttendanceRecords", fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date])
  @@map("attendance_records")
}

model Department {
  id          String       @id @default(cuid())
  name        String
  description String?
  code        String?
  parentId    String?
  headId      String?
  companyId   String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  company     Company      @relation("CompanyDepartments", fields: [companyId], references: [id], onDelete: Cascade)
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  employees   Employee[]   @relation("DepartmentEmployees")

  @@unique([companyId, name])
  @@unique([companyId, code])
  @@map("departments")
}

model Employee {
  id                String             @id @default(cuid())
  employeeId        String
  firstName         String
  lastName          String
  email             String
  phone             String?
  dateOfBirth       DateTime?
  gender            Gender?
  maritalStatus     MaritalStatus?
  address           String?
  city              String?
  state             String?
  country           String?
  zipCode           String?
  position          String
  hireDate          DateTime
  employmentType    EmploymentType     @default(FULL_TIME)
  workLocation      WorkLocation       @default(OFFICE)
  salary            Decimal?           @db.Decimal(10, 2)
  currency          String?            @default("USD")
  managerId         String?
  companyId         String
  departmentId      String?
  companyUserId     String?            @unique
  status            EmployeeStatus     @default(ACTIVE)
  terminationDate   DateTime?
  terminationReason String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attendanceRecords AttendanceRecord[] @relation("EmployeeAttendanceRecords")
  company           Company            @relation("CompanyEmployees", fields: [companyId], references: [id], onDelete: Cascade)
  companyUser       CompanyUser?       @relation("EmployeeCompanyUser", fields: [companyUserId], references: [id])
  department        Department?        @relation("DepartmentEmployees", fields: [departmentId], references: [id])
  manager           Employee?          @relation("EmployeeManager", fields: [managerId], references: [id])
  directReports     Employee[]         @relation("EmployeeManager")
  leaveRequests     LeaveRequest[]     @relation("EmployeeLeaveRequests")

  @@unique([companyId, employeeId])
  @@unique([companyId, email])
  @@map("employees")
}

model LeaveRequest {
  id              String      @id @default(cuid())
  leaveType       LeaveType
  startDate       DateTime    @db.Date
  endDate         DateTime    @db.Date
  days            Int
  reason          String
  status          LeaveStatus @default(PENDING)
  approvedBy      String?
  approvedAt      DateTime?
  rejectionReason String?
  employeeId      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  employee        Employee    @relation("EmployeeLeaveRequests", fields: [employeeId], references: [id], onDelete: Cascade)

  @@map("leave_requests")
}

model Activity {
  id            String         @id @default(cuid())
  type          ActivityType
  subject       String
  description   String?
  status        ActivityStatus @default(PLANNED)
  scheduledAt   DateTime?
  completedAt   DateTime?
  duration      Int?
  location      String?
  meetingLink   String?
  companyId     String
  contactId     String?
  leadId        String?
  opportunityId String?
  assignedToId  String?
  createdById   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  assignedTo    CompanyUser?   @relation("ActivityAssignee", fields: [assignedToId], references: [id])
  company       Company        @relation("CompanyActivities", fields: [companyId], references: [id], onDelete: Cascade)
  contact       Contact?       @relation(fields: [contactId], references: [id])
  createdBy     CompanyUser    @relation("ActivityCreator", fields: [createdById], references: [id])
  lead          Lead?          @relation(fields: [leadId], references: [id])
  opportunity   Opportunity?   @relation(fields: [opportunityId], references: [id])

  @@map("activities")
}

model Contact {
  id                  String              @id @default(cuid())
  firstName           String?
  lastName            String?
  fullName            String
  email               String?
  phone               String?
  secondaryPhone      String?
  companyName         String?
  jobTitle            String?
  department          String?
  address             String?
  city                String?
  state               String?
  country             String?
  zipCode             String?
  contactType         ContactType         @default(INDIVIDUAL)
  priority            ContactPriority     @default(MEDIUM)
  status              ContactStatus       @default(ACTIVE)
  website             String?
  linkedinUrl         String?
  twitterHandle       String?
  source              String?
  tags                String[]
  notes               String?
  accountValue        Decimal?            @db.Decimal(12, 2)
  currency            String?             @default("USD")
  lastInteractionAt   DateTime?
  lastInteractionType String?
  interactionCount    Int                 @default(0)
  companyId           String
  assignedToId        String?
  createdById         String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  activities          Activity[]
  customFieldValues   ContactFieldValue[]
  assignedTo          CompanyUser?        @relation("ContactAssignee", fields: [assignedToId], references: [id])
  company             Company             @relation("CompanyContacts", fields: [companyId], references: [id], onDelete: Cascade)
  createdBy           CompanyUser         @relation("ContactCreator", fields: [createdById], references: [id])
  leads               Lead[]
  opportunities       Opportunity[]

  @@unique([companyId, email])
  @@map("contacts")
}

model ContactFieldValue {
  id            String      @id @default(cuid())
  contactId     String
  customFieldId String
  textValue     String?
  numberValue   Decimal?    @db.Decimal(15, 4)
  dateValue     DateTime?
  booleanValue  Boolean?
  jsonValue     Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@unique([contactId, customFieldId])
  @@map("contact_field_values")
}

model Lead {
  id                     String           @id @default(cuid())
  firstName              String?
  lastName               String?
  fullName               String
  email                  String?
  phone                  String?
  companyName            String?
  jobTitle               String?
  companySize            String?
  industry               String?
  leadType               LeadType         @default(COLD)
  status                 LeadStatus       @default(NEW)
  source                 LeadSource       @default(OTHER)
  budget                 Decimal?         @db.Decimal(12, 2)
  currency               String?          @default("USD")
  timeline               String?
  decisionMaker          Boolean          @default(false)
  painPoints             String[]
  productInterest        String[]
  urgencyLevel           Int              @default(1)
  qualificationScore     Decimal?         @db.Decimal(3, 2)
  preferredContactMethod String?
  notes                  String?
  tags                   String[]
  lastInteractionAt      DateTime?
  lastInteractionType    String?
  nextFollowUpAt         DateTime?
  interactionCount       Int              @default(0)
  convertedAt            DateTime?
  conversionValue        Decimal?         @db.Decimal(12, 2)
  companyId              String
  contactId              String?
  assignedToId           String?
  createdById            String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  activities             Activity[]
  customFieldValues      LeadFieldValue[]
  assignedTo             CompanyUser?     @relation("LeadAssignee", fields: [assignedToId], references: [id])
  company                Company          @relation("CompanyLeads", fields: [companyId], references: [id], onDelete: Cascade)
  contact                Contact?         @relation(fields: [contactId], references: [id])
  createdBy              CompanyUser      @relation("LeadCreator", fields: [createdById], references: [id])
  opportunity            Opportunity?

  @@unique([companyId, email])
  @@map("leads")
}

model LeadFieldValue {
  id            String      @id @default(cuid())
  leadId        String
  customFieldId String
  textValue     String?
  numberValue   Decimal?    @db.Decimal(15, 4)
  dateValue     DateTime?
  booleanValue  Boolean?
  jsonValue     Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  lead          Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@unique([leadId, customFieldId])
  @@map("lead_field_values")
}

model Opportunity {
  id                String           @id @default(cuid())
  name              String
  value             Decimal          @db.Decimal(12, 2)
  currency          String           @default("USD")
  probability       Int              @default(50)
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  stage             OpportunityStage @default(NEW_QUALIFIED)
  isActive          Boolean          @default(true)
  description       String?
  competitorInfo    String?
  lossReason        String?
  companyId         String
  leadId            String           @unique
  contactId         String
  assignedToId      String?
  createdById       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  activities        Activity[]
  assignedTo        CompanyUser?     @relation("OpportunityAssignee", fields: [assignedToId], references: [id])
  company           Company          @relation("CompanyOpportunities", fields: [companyId], references: [id], onDelete: Cascade)
  contact           Contact          @relation(fields: [contactId], references: [id])
  createdBy         CompanyUser      @relation("OpportunityCreator", fields: [createdById], references: [id])
  lead              Lead             @relation(fields: [leadId], references: [id])

  @@map("opportunities")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  SICK_LEAVE
  CASUAL_LEAVE
  VACATION
  HOLIDAY
  WORK_FROM_HOME
}

enum CompanyUserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  SUSPENDED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum FieldType {
  TEXT
  NUMBER
  DROPDOWN
  DATE
  DATE_RANGE
  CHECKBOX
  FILE_UPLOAD
  EMAIL
  PHONE
  URL
  TEXTAREA
  CURRENCY
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum GlobalRole {
  SUPER_ADMIN
  USER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaveType {
  SICK_LEAVE
  CASUAL_LEAVE
  ANNUAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  EMERGENCY_LEAVE
  UNPAID_LEAVE
  COMPENSATORY_LEAVE
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  PROPOSAL_SENT
  CONTRACT_SENT
  FOLLOW_UP
  DEMO
  PRESENTATION
  OTHER
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  ARCHIVED
}

enum ContactType {
  INDIVIDUAL
  COMPANY
  VENDOR
  PARTNER
}

enum LeadSource {
  WEBSITE
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  COLD_CALL
  REFERRAL
  TRADE_SHOW
  ADVERTISEMENT
  PARTNER
  ORGANIC_SEARCH
  PAID_SEARCH
  OTHER
}

enum LeadStatus {
  NEW
  QUALIFIED
  FOLLOWUP
  CONTACTED
  QUALIFIED_OPPORTUNITY
  NOT_QUALIFIED
  ON_HOLD
  LOST
}

enum LeadType {
  QUERY
  HOT
  WARM
  COLD
}

enum OpportunityStage {
  NEW_QUALIFIED
  DISCOVERY
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}
