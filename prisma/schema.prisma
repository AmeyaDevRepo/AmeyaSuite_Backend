datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ====================
// ENUMS
// ====================

// Attendance status enum
enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  SICK_LEAVE
  CASUAL_LEAVE
  VACATION
  HOLIDAY
  WORK_FROM_HOME
}

// Status of user in a company
enum CompanyUserStatus {
  PENDING   // Invitation sent but not accepted
  ACTIVE    // User is active in the company
  SUSPENDED // User is temporarily suspended
  INACTIVE  // User left or was removed
}

// Employee status enum
enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  SUSPENDED
}

// Employment type enum
enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum FieldType {
  TEXT
  NUMBER
  DROPDOWN
  DATE
  DATE_RANGE
  CHECKBOX
  FILE_UPLOAD
  EMAIL
  PHONE
  URL
  TEXTAREA
  CURRENCY
}

// Employee gender enum
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// Global roles for system-wide permissions
enum GlobalRole {
  SUPER_ADMIN // Can access all companies and system settings
  USER        // Regular user who can be invited to companies
}

// Leave status enum
enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

// Leave types enum
enum LeaveType {
  SICK_LEAVE
  CASUAL_LEAVE
  ANNUAL_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  EMERGENCY_LEAVE
  UNPAID_LEAVE
  COMPENSATORY_LEAVE
}

// Marital status enum
enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  SEPARATED
}

// Work location enum
enum WorkLocation {
  OFFICE
  REMOTE
  HYBRID
}

// ====================
// AUTHENTICATION MODELS
// ====================

// User authentication model
model User {
  id       String   @id @default(cuid())
  email    String   @unique
  password String?  // Optional for OAuth users
  
  // Profile information
  firstName String?
  middleName String?
  lastName  String?
  avatar    String?
  
  // Account status
  isActive     Boolean @default(true)
  emailVerified Boolean @default(false)
  emailVerifiedAt DateTime?
  
  // Global role (for system administration)
  globalRole GlobalRole @default(USER)
  
  // OAuth and external integrations
  provider     String? // 'local', 'google', 'github', etc.
  providerId   String? // External provider user ID
  
  // Security
  lastLoginAt  DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  emailVerificationToken String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  profile      UserProfile?
  companyUsers CompanyUser[]
  
  @@map("users")
}

// Extended user profile information
model UserProfile {
  id          String   @id @default(cuid())
  bio         String?
  website     String?
  location    String?
  dateOfBirth DateTime?
  phone       String?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_profiles")
}

// ====================
// CORE SAAS MODELS
// ====================

// Company/Tenant model for multi-tenancy
model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique // URL-friendly company identifier
  domain      String?  @unique // Custom domain for the company
  logo        String?  // Company logo URL
  themeColor  String?  @default("#004aad") // Company theme color for UI customization
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  zipCode     String?
  
  // Subscription details
  subscriptionPlan    String?   // Basic, Pro, Enterprise
  subscriptionStatus  String    @default("TRIAL") // TRIAL, ACTIVE, SUSPENDED, CANCELLED
  subscriptionEndsAt  DateTime?
  maxUsers           Int       @default(10)
  
  // Settings
  isActive    Boolean  @default(true)
  settings    Json?    // Company-specific settings
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  companyUsers     CompanyUser[]
  companyRoles     CompanyRole[]
  departments      Department[]
  employees        Employee[]
  attendanceRecords AttendanceRecord[]

  contacts         Contact[]
  leads            Lead[]
  opportunities    Opportunity[]
  activities       Activity[]
  customFields     CustomField[]
  
  @@map("companies")
}

// Company-specific roles (dynamic roles created by companies)
model CompanyRole {
  id          String   @id @default(cuid())
  name        String   // e.g., "Manager", "HR Lead", "Team Lead"
  description String?
  isDefault   Boolean  @default(false) // Default role for new company users
  isSystem    Boolean  @default(false) // System-created roles (ADMIN, EMPLOYEE)
  color       String?  // Hex color for UI
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  userRoles   UserCompanyRole[]
  permissions RolePermission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, name])
  @@map("company_roles")
}

// Many-to-many relationship between company users and companies
model CompanyUser {
  id        String   @id @default(cuid())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
  
  // Status
  status    CompanyUserStatus @default(PENDING)
  isActive  Boolean  @default(true)
  
  // Invitation details
  invitedBy String?  // User ID who invited this user
  invitedAt DateTime @default(now())
  joinedAt  DateTime?
  
  // Relations
  roles     UserCompanyRole[]
  employee  Employee? // Link to employee profile if applicable

  assignedContacts     Contact[] @relation("ContactAssignee")
  createdContacts      Contact[] @relation("ContactCreator")
  assignedLeads        Lead[] @relation("LeadAssignee")
  createdLeads         Lead[] @relation("LeadCreator")
  assignedOpportunities Opportunity[] @relation("OpportunityAssignee")
  createdOpportunities  Opportunity[] @relation("OpportunityCreator")
  assignedActivities   Activity[] @relation("ActivityAssignee")
  createdActivities    Activity[] @relation("ActivityCreator")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, companyId])
  @@map("company_users")
}

model CustomField {
  id          String    @id @default(cuid())
  name        String    // Field display name
  fieldKey    String    // Unique key for the field (snake_case)
  fieldType   FieldType
  isRequired  Boolean   @default(false)
  isActive    Boolean   @default(true)
  
  // Field options (for dropdowns, etc.)
  options     Json?     // Array of options for dropdown/checkbox
  
  // Validation rules
  validation  Json?     // Min/max values, regex patterns, etc.
  
  // Display settings
  placeholder String?
  helpText    String?
  displayOrder Int      @default(0)
  
  // Relations
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  // Entity type this field belongs to
  entityType  String    // 'contact', 'lead', 'opportunity', 'deal'
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations to field values
  contactFieldValues ContactFieldValue[]
  leadFieldValues    LeadFieldValue[]
  
  @@unique([companyId, entityType, fieldKey])
  @@map("custom_fields")
}

// Permission system for granular access control
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "users.create", "employees.read", "attendance.manage"
  module      String   // e.g., "users", "employees", "attendance", "dashboard"
  action      String   // e.g., "create", "read", "update", "delete", "manage"
  description String?
  
  // Relations
  rolePermissions RolePermission[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("permissions")
}

// Role-Permission mapping for company roles
model RolePermission {
  id           String      @id @default(cuid())
  
  // Relations
  companyRole  CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId String
  permission   Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  
  createdAt    DateTime    @default(now())
  
  @@unique([companyRoleId, permissionId])
  @@map("role_permissions")
}

// User roles within a company (many-to-many)
model UserCompanyRole {
  id        String   @id @default(cuid())
  
  // Relations
  companyUser    CompanyUser @relation(fields: [companyUserId], references: [id], onDelete: Cascade)
  companyUserId  String
  companyRole    CompanyRole @relation(fields: [companyRoleId], references: [id], onDelete: Cascade)
  companyRoleId  String
  
  // Assignment details
  assignedBy String   // User ID who assigned this role
  assignedAt DateTime @default(now())
  expiresAt  DateTime? // Optional expiration date for temporary roles
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([companyUserId, companyRoleId])
  @@map("user_company_roles")
}

// ====================
// BUSINESS MODELS
// ====================

// Attendance tracking
model AttendanceRecord {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  
  // Time tracking
  checkIn     DateTime?
  checkOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  
  // Calculated fields
  hoursWorked Decimal? @db.Decimal(4, 2)
  breakHours  Decimal? @db.Decimal(4, 2)
  overtimeHours Decimal? @db.Decimal(4, 2)
  
  // Status
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  location    String? // Check-in location
  ipAddress   String? // IP address for remote check-ins
  
  // Approval
  approvedBy  String? // Manager who approved
  approvedAt  DateTime?
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([employeeId, date])
  @@map("attendance_records")
}

// Department model for company organization
model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String?  // Department code like "IT", "HR", "FIN"
  
  // Hierarchy
  parentId    String?
  parent      Department? @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  
  // Department head
  headId      String?  // Employee ID who heads this department
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  employees   Employee[]
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyId, name])
  @@unique([companyId, code])
  @@map("departments")
}

// Employee profile within a company
model Employee {
  id            String   @id @default(cuid())
  employeeId    String   // Company-specific employee ID
  
  // Personal Information
  firstName     String
  lastName      String
  email         String
  phone         String?
  dateOfBirth   DateTime?
  gender        Gender?
  maritalStatus MaritalStatus?
  
  // Address
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  
  // Employment Details
  position      String   // Job title
  hireDate      DateTime
  employmentType EmploymentType @default(FULL_TIME)
  workLocation  WorkLocation @default(OFFICE)
  salary        Decimal? @db.Decimal(10, 2)
  currency      String?  @default("USD")
  
  // Work Information
  manager       Employee? @relation("EmployeeManager", fields: [managerId], references: [id])
  managerId     String?
  directReports Employee[] @relation("EmployeeManager")
  
  // Relations
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  String?
  companyUser   CompanyUser? @relation(fields: [companyUserId], references: [id])
  companyUserId String? @unique
  
  // Attendance and Leave
  attendanceRecords AttendanceRecord[]
  leaveRequests     LeaveRequest[]
  
  // Status
  status        EmployeeStatus @default(ACTIVE)
  terminationDate DateTime?
  terminationReason String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([companyId, employeeId])
  @@unique([companyId, email])
  @@map("employees")
}

// Leave management
model LeaveRequest {
  id          String   @id @default(cuid())
  leaveType   LeaveType
  startDate   DateTime @db.Date
  endDate     DateTime @db.Date
  days        Int      // Number of days requested
  reason      String
  status      LeaveStatus @default(PENDING)
  
  // Approval workflow
  approvedBy  String?  // Manager who approved/rejected
  approvedAt  DateTime?
  rejectionReason String?
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId  String
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("leave_requests")
}

// ====================
// ROOT MODELS
// ====================









// ====================
// BIZACCELERATOR\CORE MODELS
// ====================

model Activity {
  id              String         @id @default(cuid())
  
  // Activity Details
  type            ActivityType
  subject         String
  description     String?
  status          ActivityStatus @default(PLANNED)
  
  // Timing
  scheduledAt     DateTime?      // When activity is scheduled
  completedAt     DateTime?      // When activity was completed
  duration        Int?           // Duration in minutes
  
  // Location (for meetings)
  location        String?
  meetingLink     String?        // Video meeting link
  
  // Relations - polymorphic relationships
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  
  // Related entities (optional - activity can be linked to any of these)
  contact         Contact?       @relation(fields: [contactId], references: [id])
  contactId       String?
  
  lead            Lead?          @relation(fields: [leadId], references: [id])
  leadId          String?
  
  opportunity     Opportunity?   @relation(fields: [opportunityId], references: [id])
  opportunityId   String?
  
  // Owner/Assignment - CHANGED TO CompanyUser
  assignedTo      CompanyUser?   @relation("ActivityAssignee", fields: [assignedToId], references: [id])
  assignedToId    String?
  
  // Created by - CHANGED TO CompanyUser
  createdBy       CompanyUser    @relation("ActivityCreator", fields: [createdById], references: [id])
  createdById     String
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("activities")
}

model Contact {
  id            String        @id @default(cuid())
  
  // Basic Information
  firstName     String?
  lastName      String?
  fullName      String        // Computed or provided full name
  email         String?
  phone         String?
  secondaryPhone String?
  
  // Company Information
  companyName   String?
  jobTitle      String?
  department    String?
  
  // Address Information
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  
  // Contact Details
  contactType   ContactType   @default(INDIVIDUAL)
  priority      ContactPriority @default(MEDIUM)
  status        ContactStatus @default(ACTIVE)
  
  // Business Information
  website       String?
  linkedinUrl   String?
  twitterHandle String?
  
  // Relationship Information
  source        String?       // How this contact was acquired
  tags          String[]      // Array of tags for categorization
  notes         String?       // General notes about the contact
  
  // Account/Deal relationship
  accountValue  Decimal?      @db.Decimal(12, 2)
  currency      String?       @default("USD")
  
  // Engagement tracking
  lastInteractionAt DateTime?
  lastInteractionType String? // email, call, meeting, etc.
  interactionCount    Int     @default(0)
  
  // Relations
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  
  // Owner/Assignment - CHANGED TO CompanyUser
  assignedTo    CompanyUser?  @relation("ContactAssignee", fields: [assignedToId], references: [id])
  assignedToId  String?
  
  // Created by - CHANGED TO CompanyUser
  createdBy     CompanyUser   @relation("ContactCreator", fields: [createdById], references: [id])
  createdById   String
  
  // Custom field values
  customFieldValues ContactFieldValue[]
  
  // Related entities
  leads         Lead[]
  opportunities Opportunity[]
  activities    Activity[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@unique([companyId, email])
  @@map("contacts")
}

// Dynamic field values for contacts
model ContactFieldValue {
  id            String      @id @default(cuid())
  
  // Relations
  contact       Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId     String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  
  // Value storage (polymorphic)
  textValue     String?
  numberValue   Decimal?    @db.Decimal(15, 4)
  dateValue     DateTime?
  booleanValue  Boolean?
  jsonValue     Json?       // For complex data like arrays, objects
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([contactId, customFieldId])
  @@map("contact_field_values")
}

model Lead {
  id              String      @id @default(cuid())
  
  // Basic Information
  firstName       String?
  lastName        String?
  fullName        String      // Computed or provided full name
  email           String?
  phone           String?
  
  // Company Information
  companyName     String?
  jobTitle        String?
  companySize     String?     // Small, Medium, Large, Enterprise
  industry        String?
  
  // Lead Classification
  leadType        LeadType    @default(COLD)
  status          LeadStatus  @default(NEW)
  source          LeadSource  @default(OTHER)
  
  // Qualification Information
  budget          Decimal?    @db.Decimal(12, 2)
  currency        String?     @default("USD")
  timeline        String?     // When they plan to purchase
  decisionMaker   Boolean     @default(false)
  painPoints      String[]    // Array of identified pain points
  
  // Interest and Intent
  productInterest String[]    // Products/services they're interested in
  urgencyLevel    Int         @default(1) // 1-10 scale
  qualificationScore Decimal? @db.Decimal(3, 2) // 0-10 score
  
  // Communication
  preferredContactMethod String? // email, phone, meeting
  notes           String?
  tags            String[]
  
  // Tracking
  lastInteractionAt DateTime?
  lastInteractionType String?
  nextFollowUpAt  DateTime?
  interactionCount Int        @default(0)
  
  // Conversion tracking
  convertedAt     DateTime?   // When converted to opportunity
  conversionValue Decimal?    @db.Decimal(12, 2)
  
  // Relations
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  
  // Contact relationship (if lead came from existing contact)
  contact         Contact?    @relation(fields: [contactId], references: [id])
  contactId       String?
  
  // Owner/Assignment - CHANGED TO CompanyUser
  assignedTo      CompanyUser? @relation("LeadAssignee", fields: [assignedToId], references: [id])
  assignedToId    String?
  
  // Created by - CHANGED TO CompanyUser
  createdBy       CompanyUser  @relation("LeadCreator", fields: [createdById], references: [id])
  createdById     String
  
  // Custom field values
  customFieldValues LeadFieldValue[]
  
  // Related entities
  opportunity     Opportunity? // One-to-one when converted
  activities      Activity[]
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@unique([companyId, email])
  @@map("leads")
}

// Dynamic field values for leads
model LeadFieldValue {
  id            String      @id @default(cuid())
  
  // Relations
  lead          Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId        String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  
  // Value storage (polymorphic)
  textValue     String?
  numberValue   Decimal?    @db.Decimal(15, 4)
  dateValue     DateTime?
  booleanValue  Boolean?
  jsonValue     Json?       // For complex data like arrays, objects
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@unique([leadId, customFieldId])
  @@map("lead_field_values")
}

model Opportunity {
  id              String           @id @default(cuid())
  name            String           // Opportunity name/title
  
  // Value Information
  value           Decimal          @db.Decimal(12, 2)
  currency        String           @default("USD")
  probability     Int              @default(50) // 0-100%
  
  // Timeline
  expectedCloseDate DateTime?
  actualCloseDate   DateTime?
  
  // Stage and Status
  stage           OpportunityStage @default(NEW_QUALIFIED)
  isActive        Boolean          @default(true)
  
  // Details
  description     String?
  competitorInfo  String?
  lossReason      String?          // If lost, reason for loss
  
  // Relations
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  
  // Source lead (one-to-one relationship)
  lead            Lead             @relation(fields: [leadId], references: [id])
  leadId          String           @unique
  
  // Contact relationship
  contact         Contact          @relation(fields: [contactId], references: [id])
  contactId       String
  
  // Owner/Assignment - CHANGED TO CompanyUser
  assignedTo      CompanyUser?     @relation("OpportunityAssignee", fields: [assignedToId], references: [id])
  assignedToId    String?
  
  // Created by - CHANGED TO CompanyUser
  createdBy       CompanyUser      @relation("OpportunityCreator", fields: [createdById], references: [id])
  createdById     String
  
  // Related entities
  activities      Activity[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("opportunities")
}

// ====================
// BIZACCELERATOR\ENUMS MODELS
// ====================

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  TASK
  NOTE
  PROPOSAL_SENT
  CONTRACT_SENT
  FOLLOW_UP
  DEMO
  PRESENTATION
  OTHER
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  ARCHIVED
}

enum ContactType {
  INDIVIDUAL
  COMPANY
  VENDOR
  PARTNER
}

enum LeadSource {
  WEBSITE
  SOCIAL_MEDIA
  EMAIL_CAMPAIGN
  COLD_CALL
  REFERRAL
  TRADE_SHOW
  ADVERTISEMENT
  PARTNER
  ORGANIC_SEARCH
  PAID_SEARCH
  OTHER
}

enum LeadStatus {
  NEW
  QUALIFIED
  FOLLOWUP
  CONTACTED
  QUALIFIED_OPPORTUNITY  // Goes to opportunity
  NOT_QUALIFIED
  ON_HOLD
  LOST
}

enum LeadType {
  QUERY
  HOT
  WARM
  COLD
}

enum OpportunityStage {
  NEW_QUALIFIED
  DISCOVERY
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

